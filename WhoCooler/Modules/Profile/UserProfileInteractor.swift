//
//  UserProfileInteractor.swift
//  WhoCooler
//
//  Created by Artem Trubacheev on 24.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol UserProfileBusinessLogic {
    func getProfile(request: UserProfile.Profile.Request)
    func modify(request: UserProfile.Modify.Request)
}

protocol UserProfileDataStore {}

class UserProfileInteractor: UserProfileBusinessLogic, UserProfileDataStore {

    let userDefaults = UserDefaultsService.shared
    let disposeBag = DisposeBag()

    var presenter: UserProfilePresentationLogic?
    var worker: UserProfileWorker = UserProfileWorker()

    // MARK: Do something
    func getProfile(request: UserProfile.Profile.Request) {
        guard
            let session = userDefaults.session,
            let pushToken = userDefaults.fcmToken
        else { return }

        presenter?.presentProfile(
            response: .init(
                user: session.user,
                pushToken: pushToken,
                accessToken: session.accessToken
            )
        )
    }

    func reloadProfile() {
        worker
            .modifyProfile(avatar: nil, name: nil)
            .subscribe(onNext: { [weak self] in
                guard let `self` = self else { return }

                self.userDefaults.session?.user = $0.user

                guard
                    let session = self.userDefaults.session,
                    let pushToken = self.userDefaults.fcmToken
                else { return }

                self.presenter?.presentProfile(
                    response: .init(
                        user: $0.user,
                        pushToken: pushToken,
                        accessToken: session.accessToken
                    )
                )
            }).disposed(by: disposeBag)
    }

    func modify(request: UserProfile.Modify.Request) {
        worker
            .modifyProfile(avatar: request.avatar, name: request.name)
            .subscribe(onNext: { [weak self] in
                guard let `self` = self else { return }

                self.userDefaults.session?.user = $0.user

                guard
                    let session = self.userDefaults.session,
                    let pushToken = self.userDefaults.fcmToken
                else { return }

                self.presenter?.presentProfile(
                    response: .init(
                        user: $0.user,
                        pushToken: pushToken,
                        accessToken: session.accessToken
                    )
                )
            }).disposed(by: disposeBag)
    }

}
