//
//  DebateDetailPresenter.swift
//  DebateMaker
//
//  Created by Artem Trubacheev on 09.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DebateDetailPresentationLogic {
    func presentDebate(response: DebateDetail.Initializing.Response)
    func presentVotes(response: DebateDetail.Vote.Response)

    func presentNewMessageBatch(response: DebateDetail.MessageBatch.Response)
    func presentNewRepliesBatch(response: DebateDetail.RepliesBatch.Response)

    func presentNewMessage(response: DebateDetail.MessageSend.Response)
    func presentNewReply(response: DebateDetail.ReplySend.Response)

    func presentEditedMessage(response: DebateDetail.EditedMessageSend.Response)
    func presentEditedReply(response: DebateDetail.EditedReplySend.Response)

    func deleteMessage(response: DebateDetail.DeleteMessage.Response)
    func deleteReply(response: DebateDetail.DeleteReply.Response)

    func presentAuthScreen()
    func presentNoInternet()
}

class DebateDetailPresenter: DebateDetailPresentationLogic {

    weak var viewController: DebateDetailDisplayLogic?

    // MARK: Do something
    func presentDebate(response: DebateDetail.Initializing.Response) {
        let viewModel = DebateDetail.Initializing.ViewModel(
            debate: response.debate,
            sections: makeSections(with: response.debate)
        )
        viewController?.displayDebate(viewModel: viewModel)
        viewController?.setReachEnd(!response.debate.messagesList.hasNextPage)
    }

    func makeSections(with debate: Debate) -> [DebateDetailSection] {
        if debate.messagesList.messages.isEmpty {
            return [(.emptyMessages, rows: [.emptyMessages])]
        } else {
            return debate.messagesList.messages.map {
                (.message($0), rows: [.message($0)])
            }
        }
    }

    func presentVotes(response: DebateDetail.Vote.Response) {
        viewController?.updateVotes(.init(debate: response.debate))
    }

    // MARK: - Pagination of messages/replies
    func presentNewMessageBatch(response: DebateDetail.MessageBatch.Response) {
        let cells: [DebateDetailSection] = response.messages.map { (.message($0), rows: [.message($0)]) }
        viewController?.addNewMessageBatch(.init(cells: cells))
        viewController?.setReachEnd(!response.hasNextPage)
    }

    func presentNewRepliesBatch(response: DebateDetail.RepliesBatch.Response) {
        viewController?.addNewRepliesBatch(.init(messageId: response.message.id))
    }

    // MARK: - New message/reply
    func presentNewMessage(response: DebateDetail.MessageSend.Response) {
        viewController?.addNewMessage(.init(message: response.message))
        viewController?.updateMessageCounter(value: 1)
        viewController?.resetTextView()
    }

    func presentNewReply(response: DebateDetail.ReplySend.Response) {
        viewController?.addReplyToMessage(.init(reply: response.threadMessage))
        viewController?.updateMessageCounter(value: 1)
        viewController?.resetTextView()
    }

    // MARK: - Editing message/reply
    func presentEditedMessage(response: DebateDetail.EditedMessageSend.Response) {
        viewController?.reloadEditedMessage(.init(message: response.message))
        viewController?.resetTextView()
    }

    func presentEditedReply(response: DebateDetail.EditedReplySend.Response) {
        viewController?.reloadEditedReply(.init(message: response.message))
        viewController?.resetTextView()
    }

    // MARK: - Deleting message/reply
    func deleteMessage(response: DebateDetail.DeleteMessage.Response) {
        viewController?.deleteMessage(.init(message: response.message))
        let messageCountToDelete = 1 + response.message.replyCount
        viewController?.updateMessageCounter(value: -messageCountToDelete)
    }

    func deleteReply(response: DebateDetail.DeleteReply.Response) {
        viewController?.deleteReply(.init(message: response.message))
        viewController?.updateMessageCounter(value: -1)
    }

    // MARK: - Error Handling
    func presentAuthScreen() {
        viewController?.navigateToAuthorization()
    }

    func presentNoInternet() {
        viewController?.showNoInternet()
    }

}
