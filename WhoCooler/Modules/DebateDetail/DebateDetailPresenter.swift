//
//  DebateDetailPresenter.swift
//  DebateMaker
//
//  Created by Artem Trubacheev on 09.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DebateDetailPresentationLogic {
    func presentDebate(response: DebateDetail.Initializing.Response)
    func presentNewRepliesBatch(message: Message)
    func presentNewReply(parentMessage: Message, threadMessage: Message)
    func didFinishSendMessage()
}

class DebateDetailPresenter: DebateDetailPresentationLogic {

    weak var viewController: DebateDetailDisplayLogic?

    // MARK: Do something
    func presentDebate(response: DebateDetail.Initializing.Response) {
        let viewModel = DebateDetail.Initializing.ViewModel(
            debate: response.debate,
            sections: makeSections(with: response.debate)
        )
        viewController?.displayDebate(viewModel: viewModel)
        viewController?.setReachEnd(!response.debate.messagesList.hasNextPage)
    }

    func makeSections(with debate: Debate) -> [DebateDetailSection] {
        debate.messagesList.messages.map {
            (.message($0), rows: [.message($0)])
        }
    }

    func presentNewRepliesBatch(message: Message) {
        viewController?.reloadMessage(message.id, threadMessageId: nil)
    }

    func presentNewReply(parentMessage: Message, threadMessage: Message) {
        viewController?.reloadMessage(parentMessage.id, threadMessageId: threadMessage.id)
    }

    func didFinishSendMessage() {
        viewController?.didFinishSendMessage()
    }

}
