//
//  AuthorizationScreenViewController.swift
//  WhoCooler
//
//  Created by Artem Trubacheev on 04.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol AuthorizationScreenDisplayLogic: class {
    func displayProviders(viewModel: AuthorizationScreen.Providers.ViewModel)
    func didEndAuth(viewModel: AuthorizationScreen.Authorization.ViewModel)
}

class AuthorizationScreenViewController: UIViewController, AuthorizationScreenDisplayLogic {

    // MARK: - Subviews
    private var authContainerView = AuthContainerView()

    // MARK: - Properties
    var interactor: AuthorizationScreenBusinessLogic?
    var router: (NSObjectProtocol & AuthorizationScreenRoutingLogic & AuthorizationScreenDataPassing)?

    let disposeBag = DisposeBag()

    var authProviders: [AuthProvider] = [] {
        didSet {
            authContainerView.authProviderButtons = authProviders.map {
                if $0.type == .apple, #available(iOS 13, *) {
                    return AuthButton(provider: $0)
                } else {
                    return AuthButton(provider: $0)
                }
            }
        }
    }

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)

        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)

        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = AuthorizationScreenInteractor()
        let presenter = AuthorizationScreenPresenter()
        let router = AuthorizationScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        AnalyticsService.shared.trackScreen(.auth)

        view.backgroundColor = .white
        addSubviews()
        interactor?.getProviders(request: .init())
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()

        layout()
    }

    func layout() {
        authContainerView.pin
            .horizontally()
            .vCenter()
            .sizeToFit(.width)
    }

    // MARK: - Private methods
    private func addSubviews() {
        view.addSubviews(authContainerView)
    }

    func displayProviders(viewModel: AuthorizationScreen.Providers.ViewModel) {
        authProviders = viewModel.providers

        Observable.merge(
            authContainerView.authProviderButtons.map {
                $0.authProviderSelected
            }
        ).subscribe(onNext: { [unowned self] in
            AnalyticsService.shared.trackEvent(.loginTry(provider: $0.type.rawValue))
            self.interactor?.didSelectProvider(request: .init(provider: $0))
        }).disposed(by: disposeBag)
    }

    func didEndAuth(viewModel: AuthorizationScreen.Authorization.ViewModel) {
        AnalyticsService.shared.trackEvent(.loginSuccess)
        dismiss(animated: true, completion: nil)
    }

}
