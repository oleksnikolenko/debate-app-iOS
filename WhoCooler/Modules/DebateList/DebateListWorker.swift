//
//  DebateListWorker.swift
//  DebateMaker
//
//  Created by Artem Trubacheev on 18.01.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Alamofire
import RxSwift

class DebateListWorker {

    let networkService = NetworkServiceImplementation.shared

    func getDebates(
        page: Int = 1,
        categoryId: String? = Category.all.id,
        sorting: String
    ) -> Observable<DebatesResponse> {
        networkService.getData(
            endpoint: "debates",
            parameters: [
                "page": page,
                "sorting": sorting,
                "category_id": categoryId ?? Category.all.id
            ],
            shouldLocalize: true
        )
    }

    func getDebate(id: String) -> Observable<Debate> {
        networkService.getData(
            endpoint: "debate",
            parameters: ["debate_id": id]
        )
    }

    func reportDebate(id: String) -> Observable<Empty> {
        networkService.getData(
            endpoint: "debatereport",
            parameters: ["debate_id": id],
            method: .post
        )
    }

    func vote(debateId: String, sideId: String) -> Observable<DebateVoteResponse> {
        networkService.getData(
            endpoint: "vote",
            parameters: ["debate_id": debateId, "side_id": sideId],
            method: .post
        )
    }

    func toggleFavorites(request: DebateList.Favorites.PostRequest) -> Observable<Empty> {
        if request.isFavorite {
            return deleteFromFavorites(debateId: request.debate.id)
        } else {
            return addToFavorites(debateId: request.debate.id)
        }
    }

    func sendCustdevInfo(text: String) -> Observable<Empty> {
        networkService.getData(
            endpoint: "soup",
            parameters: ["key": "custdev", "text": text],
            method: .post
        )
    }

    private func addToFavorites(debateId: String) -> Observable<Empty> {
        networkService.getData(
            endpoint: "favorites",
            parameters: ["debate_id": debateId],
            method: .post
        )
    }

    private func deleteFromFavorites(debateId: String) -> Observable<Empty> {
        networkService.getData(
            endpoint: "favorites",
            parameters: ["debate_id": debateId],
            method: .delete
        )
    }

}
