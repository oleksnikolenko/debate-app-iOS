//
//  DebateListViewController.swift
//  WhoCooler
//
//  Created by Artem Trubacheev on 18.01.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import ESPullToRefresh
import GoogleSignIn
import RxSwift
import RxCocoa
import SUHelpers

protocol DebateListDisplayLogic: class {
    func displayCells(viewModel: DebateList.Something.ViewModel)
}

class DebateListViewController: UIViewController, DebateListDisplayLogic {

    // MARK: - Subviews
    private lazy var tableView = UITableView().with {
        $0.dataSource = self
        $0.delegate = self
        $0.separatorStyle = .none
        $0.es.addPullToRefresh { [weak self] in
            guard let `self` = self else { return }
            self.interactor?.getData(request: self.request)
        }
        $0.es.addInfiniteScrolling { [weak self] in
            self?.interactor?.getNextPage()
        }
    }

    private var selectedCategoryId: String?
    private var selectedSorting: DebateSorting = .popular {
        didSet {
            guard selectedSorting != oldValue else { return }
            self.interactor?.getData(request: self.request)
        }
    }

    private lazy var profileButton = UIBarButtonItem(
        image: UIImage(named: "profile"),
        style: .plain,
        target: self,
        action: #selector(navigateToAuthorization)
    )

    private lazy var searchButton = UIBarButtonItem(
        barButtonSystemItem: .search,
        target: self,
        action: #selector(navigateToSearch)
    )

    // MARK: - Properties
    var request: DebateList.Something.Request {
        DebateList.Something.Request(categoryId: selectedCategoryId, selectedSorting: selectedSorting.rawValue)
    }
    var cells: [DebateList.CellType] = [] {
        didSet {
            tableView.reloadData()
        }
    }

    let disposeBag = DisposeBag()

    var interactor: DebateListBusinessLogic?
    var router: (NSObjectProtocol & DebateListRoutingLogic & DebateListDataPassing)?

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = DebateListInteractor()
        let presenter = DebateListPresenter()
        let router = DebateListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }

    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        navigationController?.navigationBar.isTranslucent = false
        edgesForExtendedLayout = []

        /// TODO: - Localize
        title = "Debates"
        view.addSubviews(tableView)

        navigationItem.leftBarButtonItem = profileButton
        navigationItem.rightBarButtonItem = searchButton
        navigationController?.navigationBar.tintColor = .black

        interactor?.getData(request: request)
    }

    // MARK: - Layout
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        layout()
    }

    func layout () {
        tableView.pin.all()
    }

    // MARK: - Do something
    func displayCells(viewModel: DebateList.Something.ViewModel) {
        self.cells = viewModel.cells

        tableView.es.stopLoadingMore()
        tableView.es.stopPullToRefresh()

        if viewModel.hasNextPage {
            tableView.es.resetNoMoreData()
        } else {
            tableView.es.noticeNoMoreData()
        }
    }

    @objc private func navigateToAuthorization() {
        router?.navigateToProfile()
    }

    @objc private func navigateToSearch() {
        router?.navigateToSearch()
    }

    private func presentSortingActionSheet(indexPath: IndexPath, completion: (() -> Void)?) {
        /// TODO: - Localize
        let actionSheet = UIAlertController(
            title: "Sort debates",
            message: nil,
            preferredStyle: .actionSheet
        )
        /// TODO: - Localize
        actionSheet.addAction(UIAlertAction(title: "Popular", style: .default) { [weak self] _ in
            self?.setSelectedSorting(sorting: .popular, completion: completion)
        })
        /// TODO: - Localize
        actionSheet.addAction(UIAlertAction(title: "Newest", style: .default) { [weak self] _ in
            self?.setSelectedSorting(sorting: .newest, completion: completion)
        })
        /// TODO: - Localize
        actionSheet.addAction(UIAlertAction(title: "Oldest", style: .default) { [weak self] _ in
            self?.setSelectedSorting(sorting: .oldest, completion: completion)
        })
        /// TODO: - Localize
        actionSheet.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))

        present(actionSheet, animated: true)
    }

    private func setSelectedSorting(sorting: DebateSorting, completion: (() -> Void)?) {
        selectedSorting = sorting
        completion?()
    }

}

extension DebateListViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch cells[indexPath.row] {
        case .debate(let debate):
            let cell = tableView.cell(for: DebateShortCell.self)

            cell.setup(debate)
            cell.didClickFavorites
                .subscribe(onNext: { [weak self] in
                    guard let `self` = self else { return }

                    let completionHandler: (() -> Void)? = {
                        cell.toggleFavorite()
                    }
                    self.interactor?.toggleFavorites(
                        request: DebateList.Favorites.PostRequest(debate: debate, isFavorite: cell.isFavorite),
                        successCompletion: completionHandler
                    )
                }).disposed(by: cell.disposeBag)

            return cell

        case .categoryList(let categories):
            let cell = tableView.cell(for: CategoryTableViewCell.self)
            cell.model = categories

            cell.selectedCategory
                .skip(1)
                .distinctUntilChanged()
                .subscribe(onNext: { category in
                    self.selectedCategoryId = category.id
                    self.interactor?.getData(request: self.request)
                }).disposed(by: cell.disposeBag)

            cell.didClickSorting
                .subscribe(onNext: {
                    let completion: (() -> Void)? = { [weak self] in
                        guard let `self` = self else { return }
                        cell.setSorting(sorting: self.selectedSorting)
                    }
                    self.presentSortingActionSheet(indexPath: indexPath, completion: completion)
                }).disposed(by: cell.disposeBag)

            return cell
        }
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { cells.count }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        switch cells[indexPath.row] {
        case .debate(let debate):
            router?.navigateToDebate(debate)
        case .categoryList:
            break
        }
    }

}
