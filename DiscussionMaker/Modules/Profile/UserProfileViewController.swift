//
//  UserProfileViewController.swift
//  DiscussionMaker
//
//  Created by Artem Trubacheev on 24.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PinLayout
import RxSwift
import SwiftMessages

protocol UserProfileDisplayLogic: class {
    func displayProfile(viewModel: UserProfile.Profile.ViewModel)
}

class UserProfileViewController: UIViewController, UserProfileDisplayLogic {

    // MARK: - Subviews
    let avatar = UIImageView()
    let userNameLabel = UILabel().with {
        $0.textAlignment = .center
        $0.textColor = .black
        $0.numberOfLines = 0
        $0.isUserInteractionEnabled = true
    }
    let userIdLabel = UILabel().with {
        $0.textAlignment = .center
        $0.textColor = .black
        $0.numberOfLines = 0
        $0.isUserInteractionEnabled = true
    }
    let pushTokenLabel = UILabel().with {
        $0.textAlignment = .center
        $0.textColor = .black
        $0.numberOfLines = 0
        $0.isUserInteractionEnabled = true
    }
    let accessTokenLabel = UILabel().with {
        $0.textAlignment = .center
        $0.textColor = .black
        $0.numberOfLines = 0
        $0.isUserInteractionEnabled = true
    }

    // MARK: - Properties
    var viewModel: UserProfile.Profile.ViewModel?
    let disposeBag = DisposeBag()

    var interactor: UserProfileBusinessLogic?
    var router: (NSObjectProtocol & UserProfileRoutingLogic & UserProfileDataPassing)?

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = UserProfileInteractor()
        let presenter = UserProfilePresenter()
        let router = UserProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor

        view.addSubviews(
            avatar,
            userNameLabel,
            userIdLabel,
            pushTokenLabel,
            accessTokenLabel
        )
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .white
        getProfile()
        bindObservables()
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()

        layout()
    }

    func bindObservables() {
        userNameLabel.didClick
            .compactMap { [weak self] in self?.viewModel?.user.name }
            .subscribe(onNext: { [weak self] in self?.copy(text: $0) })
            .disposed(by: disposeBag)

        userIdLabel.didClick
            .compactMap { [weak self] in self?.viewModel?.user.id }
            .subscribe(onNext: { [weak self] in self?.copy(text: $0) })
            .disposed(by: disposeBag)

        pushTokenLabel.didClick
            .compactMap { [weak self] in self?.viewModel?.pushToken }
            .subscribe(onNext: { [weak self] in self?.copy(text: $0) })
            .disposed(by: disposeBag)

        accessTokenLabel.didClick
            .compactMap { [weak self] in self?.viewModel?.accessToken }
            .subscribe(onNext: { [weak self] in self?.copy(text: $0) })
            .disposed(by: disposeBag)
    }

    func layout() {
        avatar.pin
            .size(52)
            .top(16)
            .hCenter()

        userNameLabel.pin
            .horizontally(8)
            .sizeToFit(.width)
            .below(of: avatar)
            .marginTop(8)

        userIdLabel.pin
            .horizontally(8)
            .sizeToFit(.width)
            .below(of: userNameLabel)
            .marginTop(8)

        pushTokenLabel.pin
            .horizontally(8)
            .sizeToFit(.width)
            .below(of: userIdLabel)
            .marginTop(8)

        accessTokenLabel.pin
            .horizontally(8)
            .sizeToFit(.width)
            .below(of: pushTokenLabel)
            .marginTop(8)
    }

    // MARK: Do something
    func getProfile() {
        interactor?.getProfile(request: .init())
    }

    func copy(text: String?) {
        UIPasteboard.general.string = text
        SwiftMessages.defaultConfig.presentationContext = .window(windowLevel: .statusBar)
        SwiftMessages.show {
            let card = MessageView.viewFromNib(layout: .cardView)

            card.configureContent(body: "Copied: \(text ?? "nothing")")
            card.button?.isHidden = true
            card.titleLabel?.isHidden = true
            card.configureTheme(.success)

            return card
        }
    }

    func displayProfile(viewModel: UserProfile.Profile.ViewModel) {
        self.viewModel = viewModel

        avatar.kf.setImage(with: try? viewModel.user.avatar.asURL())

        userNameLabel.text = viewModel.user.name
        userIdLabel.text = viewModel.user.id
        pushTokenLabel.text = "push token: " + viewModel.pushToken
        accessTokenLabel.text = "access token: " + viewModel.accessToken

        view.setNeedsLayout()
    }

}
