//
//  DiscussionListInteractor.swift
//  DiscussionMaker
//
//  Created by Artem Trubacheev on 18.01.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol DiscussionListBusinessLogic {
    func getData(request: DiscussionList.Something.Request)
    func getNextPage()
}

protocol DiscussionListDataStore {}

class DiscussionListInteractor: DiscussionListBusinessLogic, DiscussionListDataStore {

    var presenter: DiscussionListPresentationLogic?
    var worker = DiscussionListWorker()

    let disposeBag = DisposeBag()

    private var response = DebatesResponse()
    private var page = 1
    private var categoryId: String?
    private var selectedSorting: String = "popular"

    // MARK: - Do something
    func getData(request: DiscussionList.Something.Request) {
        worker.getDiscussions(
            categoryId: request.categoryId,
            sorting: request.selectedSorting
        ).subscribe(onNext: { [weak self] in
            self?.presenter?.presentSomething(response:
                .init(
                    data: $0.debates,
                    categories: $0.categories,
                    hasNextPage: $0.hasNextPage
                )
            )
            self?.response = $0
            self?.categoryId = request.categoryId
            self?.selectedSorting = request.selectedSorting
            self?.page = 1
        }).disposed(by: disposeBag)
    }

    func getNextPage() {
        worker.getDiscussions(
            page: page + 1,
            categoryId: categoryId,
            sorting: selectedSorting
        ).subscribe(onNext: { [weak self] in
            guard let `self` = self else { return }

            self.response.debates += $0.debates
            self.response.hasNextPage = $0.hasNextPage

            self.presenter?.presentSomething(response:
                .init(
                    data: self.response.debates,
                    categories: self.response.categories,
                    hasNextPage: self.response.hasNextPage
                )
            )
            self.page += 1
        }).disposed(by: disposeBag)
    }
    
}
