//
//  DiscussionDetailInteractor.swift
//  DiscussionMaker
//
//  Created by Artem Trubacheev on 09.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol DiscussionDetailBusinessLogic {
    func initDebate(request: DiscussionDetail.Initializing.Request)
    func reloadDebate()
    func getNextMessagesPage()
    func vote(request: DiscussionDetail.Vote.Request)
}

protocol DiscussionDetailDataStore {}

class DiscussionDetailInteractor: DiscussionDetailBusinessLogic, DiscussionDetailDataStore {

    var presenter: DiscussionDetailPresentationLogic?
    var worker: DiscussionDetailWorker
    let disposeBag = DisposeBag()

    init() {
        worker = DiscussionDetailWorker()
    }

    var debate: Discussion!

    // MARK: Protocol Methods
    func initDebate(request: DiscussionDetail.Initializing.Request) {
        debate = request.debate
        let response = DiscussionDetail.Initializing.Response(
            debate: request.debate
        )
        presenter?.presentDebate(response: response)

        worker.getDebate(id: request.debate.id)
            .subscribe(onNext: { [weak self] in
                self?.didFetchDebate($0)
            }).disposed(by: disposeBag)
    }

    func reloadDebate() {
        guard let id = debate?.id else { return }

        worker.getDebate(id: id)
            .subscribe(onNext: { [weak self] in
                self?.didFetchDebate($0)
            }).disposed(by: disposeBag)
    }

    func getNextMessagesPage() {
        guard
            debate?.messagesList.hasNextPage == true,
            let lastTime = debate?.messagesList.messages.last?.createdTime
        else { return }

        worker.getNextMessages(id: debate.id, ctime: lastTime)
            .subscribe(onNext: { [weak self] in
                guard let `self` = self else { return }

                self.debate.messagesList.messages += $0.messages
                self.debate.messagesList.hasNextPage = $0.hasNextPage

                self.didFetchDebate(self.debate)
            }).disposed(by: disposeBag)
    }

    func vote(request: DiscussionDetail.Vote.Request) {
        worker.vote(debateId: debate.id, sideId: request.sideId)
            .map { [weak self] _ in self?.reloadDebate() }
            .subscribe()
            .disposed(by: disposeBag)
    }

    // MARK: - Private Methods
    private func didFetchDebate(_ debate: Discussion) {
        self.debate = debate
        presenter?.presentDebate(response: .init(debate: debate))
    }

}
