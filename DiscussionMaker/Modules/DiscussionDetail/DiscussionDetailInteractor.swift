//
//  DiscussionDetailInteractor.swift
//  DiscussionMaker
//
//  Created by Artem Trubacheev on 09.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol DiscussionDetailBusinessLogic {
    func initDebate(request: DiscussionDetail.Initializing.Request)
    func vote(request: DiscussionDetail.Vote.Request)
}

protocol DiscussionDetailDataStore {}

class DiscussionDetailInteractor: DiscussionDetailBusinessLogic, DiscussionDetailDataStore {

    var presenter: DiscussionDetailPresentationLogic?
    var worker: DiscussionDetailWorker
    let disposeBag = DisposeBag()

    init() {
        worker = DiscussionDetailWorker()
    }

    var debate: Discussion?

    // MARK: Do something
    func initDebate(request: DiscussionDetail.Initializing.Request) {
        debate = request.debate
        let response = DiscussionDetail.Initializing.Response(
            debate: request.debate
        )
        presenter?.presentDebate(response: response)

        worker.getDebate(id: request.debate.id)
            .subscribe(onNext: { [weak self] in
                self?.presenter?.presentDebate(response: .init(debate: $0))
            }).disposed(by: disposeBag)
    }

    func vote(request: DiscussionDetail.Vote.Request) {
        worker.vote(debateId: debate?.id ?? "", sideId: request.sideId)
            .subscribe()
            .disposed(by: disposeBag)
    }

}
