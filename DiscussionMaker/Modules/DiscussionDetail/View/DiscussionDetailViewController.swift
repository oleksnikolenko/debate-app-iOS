
//
//  DiscussionDetailViewController.swift
//  DiscussionMaker
//
//  Created by Artem Trubacheev on 09.04.2020.
//  Copyright (c) 2020 Artem Trubacheev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import PinLayout

protocol DiscussionDetailDisplayLogic: class {
    func displayDebate(viewModel: DiscussionDetail.Initializing.ViewModel)
}

class DiscussionDetailViewController: UIViewController, DiscussionDetailDisplayLogic {

    var interactor: DiscussionDetailBusinessLogic?
    var router: (NSObjectProtocol & DiscussionDetailRoutingLogic & DiscussionDetailDataPassing)?
    var debate: Discussion
    let disposeBag = DisposeBag()

    var sections = [DiscussionDetailSection]() {
        didSet {
            tableView.reloadData()
        }
    }

    // MARK: Subviews
    let header = DiscussionDetailHeader(frame: .zero)
    lazy var tableView = UITableView().with {
        $0.dataSource = self
        $0.delegate = self
        $0.tableHeaderView = header
    }

    // MARK: Object lifecycle
    init(debate: Discussion) {
        self.debate = debate

        super.init(nibName: nil, bundle: nil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("not implemented")
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = DiscussionDetailInteractor()
        let presenter = DiscussionDetailPresenter()
        let router = DiscussionDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white

        sendDebate()

        view.addSubviews(
            tableView
        )

        header.leftSidePhoto.didClick
            .subscribe(onNext: { [unowned self] _ in
                self.interactor?.vote(request: .init(sideId: self.debate.leftSide.id))
            })
            .disposed(by: disposeBag)

        header.rightSidePhoto.didClick
            .subscribe(onNext: { [unowned self] _ in
                self.interactor?.vote(request: .init(sideId: self.debate.rightSide.id))
            })
            .disposed(by: disposeBag)
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()

        layout()
    }

    private func layout() {
        header.sizeToFit()
        
        tableView.pin.all()
    }

    // MARK: Do something
    func sendDebate() {
        interactor?.initDebate(request: .init(debate: debate))
    }

    func displayDebate(viewModel: DiscussionDetail.Initializing.ViewModel) {
        header.setup(debate: viewModel.debate)
        sections = viewModel.sections

        view.setNeedsLayout()
    }
}

extension DiscussionDetailViewController: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        sections[section].rows.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch sections[indexPath.section].rows[indexPath.row] {
        case .message(let message):
            let cell = tableView.cell(for: DiscussionChatCell.self)

            cell.setup(message)

            return cell
        }
    }

}
